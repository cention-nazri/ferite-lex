uses "console", "regexp", "filesystem";


class Flexer {
	
	array contexts;
	array contextStack;
	
	function context( string context ) {
		if( not .contexts.keyExists(context) )
			.contexts[context] = new FlexerContext( context, .contexts.size() );
		return .contexts[context];
	}
	function defaultContext() {
		return .context('FlexerDefault');
	}
	string text = '';
	function start( string text ) {
		.pushContext('FlexerDefault');
		.text = text;
		.contexts.each() using ( context ) {
			context.finalise();
		};
	}
	function streamLeft() {
		return (.text.length() > 0 ? true : false);
	}
	function lex() {
		boolean tokenRecieved = false;
		number  tokenID = 0;
		while( not tokenRecieved ) {
			array r = .contextStack.last().match( self, .text );
			if( r[0] > 0 ) {
				
				if( r[0] < .text.length() )
					.text = .text[r[0]..];
				else if( r[0] == .text.length() )
					.text = '';
					
				if( r[1] isa number ) {
					tokenID = r[1];
					break;
				} else {
					continue;
				}
			}
			break;
		}
		return tokenID;
	}
	function pushContext( string name )
		.contextStack.push( .context(name) );
	function popContext() 
		.contextStack.pop();
}

class FlexerContext {
	
	string name;
	number id;
	
	constructor( string name, number id ) {
		.name = name;
		.id = id;
	}
	
	array tokens;
	array order;
	
	function token( string token, string match, object action ) {
		if( not action ) {
			action = closure( flexer, token ) { };
		}
		.tokens[token] = [ 'Token' => token, 'Match' => match, 'Action' => action ];
		.order[] = token;
	}
	function token( string match, object action ) {
		return .token( 'Token' + .order.size(), match, action );
	}
	function lexicon() {
		return '^(' + .order.join('|') using ( key ) { return "(?P<$key>${.tokens[key]['Match']})"; } + ')';
	}
	
	object regexp;
	function finalise() {
		.token( 'UNKNOWN', '.', closure( flexer, token ) { return token.charToNum(); } );
		.regexp = new Regexp(.lexicon(), 'gs');
	}
	function match( object flexer, string text ) {
		object match = null;
		array  captures = [];
		number tokenLength = 0;
		void   invokeReturn;
		
		match = .regexp.match( text );
		if( match ) {
			captures = match.captures();
			captures.keys().each() using ( key ) {
				if( captures[key] ) {
					object action = .tokens[key]['Action'];
					invokeReturn = action.invoke( flexer, captures[key] );
					tokenLength = captures[key].length();
					return false;
				}
			};
		}
		return [ 'TokenLength' => tokenLength, 'ActionReturn' => invokeReturn ];
	}
}

object f = new Flexer();
f.defaultContext().token( 'BNUM', '0b[0-1]+', closure( flexer, token ) { Console.println("Binary Number: $token" ); });
f.defaultContext().token( 'ONUM', '0[0-7]+', closure( flexer, token ) { Console.println("Octal Number: $token" ); });
f.defaultContext().token( 'HNUM', '0x[0-9a-fA-F]+', closure( flexer, token ) { Console.println("Hexadecimal Number: $token" ); });
f.defaultContext().token( 'RNUM', '(([0-9]*[\.][0-9]+)|([0-9]+[\.][0-9]+))', closure( flexer, token ) { Console.println("Real Number: $token" ); });
f.defaultContext().token( 'NNUM', '(([0]{1})|([1-9]+[0-9]*))', closure( flexer, token ) { Console.println("Natural Number: $token" ); });	
f.defaultContext().token( 'LABEL', '[a-zA-Z_][a-zA-Z0-9_]*', closure( flexer, token ) { Console.println("Label: $token" ); });
f.defaultContext().token( 'PLUS', '\+', closure( flexer, token ) { Console.println(" > $token <" ); });
f.defaultContext().token( 'MINUS', '\-', closure( flexer, token ) { Console.println(" > $token <" ); });
f.defaultContext().token( '[ \n\r\t]', null );
f.defaultContext().token( '/\*', closure( flexer, token ) { Console.println('Start Comment'); flexer.pushContext('COMMENT'); } );

f.context('COMMENT').token( '/\*',       closure( flexer, token ) { flexer.pushContext('COMMENT'); } );
f.context('COMMENT').token( '[*]/',      closure( flexer, token ) { Console.println('End Comment'); flexer.popContext(); } );
f.context('COMMENT').token( '[^*/]*',    null );
f.context('COMMENT').token( '[*][^*/]*', null );
f.context('COMMENT').token( '/[^*]',     null );

f.start( File.open((argv ? argv[0] : 'test.txt')).toString() );
while( f.lex() > 0 );
