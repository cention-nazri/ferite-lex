uses "regexp";

class Flexer {
	
	array   contexts;
	array   contextStack;
	boolean debug;
	
	function context( string context ) {
		object contextObject;
		if( not .contexts.keyExists(context) )
			.contexts[context] = new FlexerContext( context, .contexts.size() );
		contextObject = .contexts[context];
		contextObject.debug = .debug;
		if( recipient() ) {
			deliver( contextObject );
		}
		return contextObject;
	}
	function defaultContext() {
		return .context('FlexerDefault') using recipient();
	}
	string text = '';
	function start( string text ) {
		.contextStack = [];
		.pushContext('FlexerDefault');
		.text = text;
		.contexts.each() using ( context ) {
			context.finalise();
		};
	}
	function streamLeft() {
		return (.text.length() > 0 ? true : false);
	}
	number lastToken;
	array  tokenStack;
	
	function lex() {
		boolean tokenRecieved = false;
		.lastToken = 0;
		while( .tokenStack ) {
			.lastToken = .tokenStack[0]['Token'];
			.attachedObject = null;
			if( .tokenStack[0]['AttachedObject'] isa object )
				.attachedObject = .tokenStack[0]['AttachedObject'];
			.tokenStack.shift();
			return .lastToken;
		}
		while( not tokenRecieved ) {
			array r;
			.attachedObject = null;
			r = .contextStack.last().match( self, .text );
			if( r['TokenLength'] > 0 ) {
				if( r['TokenLength'] < .text.length() )
					.text = .text[r['TokenLength']..];
				else if( r['TokenLength'] == .text.length() )
					.text = '';
					
				if( r['ActionReturn'] isa number ) {
					.lastToken = r['ActionReturn'];
					break;
				} else if( r['ActionReturn'] isa array ) {
					.tokenStack = r['ActionReturn'];
					.lastToken = .tokenStack[0]['Token'];
					.attachedObject = null;
					if( .tokenStack[0]['AttachedObject'] isa object )
						.attachedObject = .tokenStack[0]['AttachedObject'];
					.tokenStack.shift();
					return .lastToken;
				} else {
					continue;
				}
			}
			break;
		}
		return .lastToken;
	}
	function pushContext( string name )
		.contextStack.push( .context(name) );
	function pushDefaultContext()
		.contextStack.push( .context('FlexerDefault') );
	function popContext() 
		.contextStack.pop();
		
	object attachedObject;
	function attach( object o )
		.attachedObject = o;
}

class FlexerContext {
	
	string name;
	number id;
	boolean debug;
	
	constructor( string name, number id ) {
		.name = name;
		.id = id;
		.debug = false;
	}
	
	array tokens;
	array order;
	
	function token( string token, string match, void action ) {
		if( Regexp.match( '^[A-Za-z]+$', match ) )
			match += '\b';
		.tokens[token] = [ 'Token' => token, 'Match' => match, 'Action' => action ];
		.order[] = token;
	}
	function token( string token, string match ) {
		object o = recipient();
		if( o )
			return .token( token, match, o );
		else
			return .token( 'Token' + .order.size(), token, match[0].charToNum() );
	}
	function token( string match ) {
		object o = recipient();
		return .token( 'Token' + .order.size(), match, o );
	}
	function token( string match, object action )
		return .token( 'Token' + .order.size(), match, action );
	function token( string match, number token )
		return .token( 'Token' + .order.size(), match, token );

	string lexicon;
	function lexicon() {
		.lexicon = '^(' + .order.join('|') using ( key ) { return "(?P<$key>${.tokens[key]['Match']})"; } + ')';
		return .lexicon;
	}
	
	object regexp;
	function finalise() {
		if( not .regexp ) {
			.token( 'UNKNOWN', '.', closure( flexer, token ) { return token.charToNum(); } );
			.regexp = new Regexp(.lexicon(), 'gs');
		}
	}
	function match( object flexer, string text ) {
		object match = null;
		array  captures = [];
		number tokenLength = 0;
		void   invokeReturn;
		array  result;
		
		match = .regexp.match( text );
		if( .debug ) {
			Console.println('Flexer.Context.match: ' + "Text: '$text'");
			Console.println('Flexer.Context.match: ' + "Lexicon: ${.lexicon}");
			Console.println('Flexer.Context.match: ' + "Match: $match");
		}
		if( match ) {
			captures = match.captures();
			.order.each() using ( key ) {
				.debug and Console.println('Flexer.Context.match: ' + "Checking: '$key' -> '${captures[key]}'");
				if( captures.keyExists(key) and captures[key] ) {
					void action = .tokens[key]['Action'];
					if( action isa object and action )
						invokeReturn = action.invoke( flexer, captures[key] );
					else if( action isa number ) 
						invokeReturn = action;
					tokenLength = captures[key].length();
					return false;
				}
			};
		}
		result = [ 'TokenLength' => tokenLength, 'ActionReturn' => invokeReturn ];
		.debug and Console.println('Flexer.Context.match: ' + result);
		return result;
	}
}

