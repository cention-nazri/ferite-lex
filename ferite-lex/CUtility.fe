/********************************************************
Class: Utility
*******************************************************/
class CUtility 
{
    /********************************************************
    Constants
    *******************************************************/
    static final number DEBUG = true;
    static final number SLOW_DEBUG = true;
    static final number DUMP_DEBUG = true;
    /*static final number DEBUG = false;
    static final number SLOW_DEBUG = false;
    static final number DUMP_DEBUG = false;*/
    static final number DESCENT_DEBUG = false;
    static final number OLD_DEBUG = false;
    static final number OLD_DUMP_DEBUG = false;
    static final number FOODEBUG = false;
    static final number DO_DEBUG = false;
    
    /********************************************************
        Constants: Integer Bounds
        *******************************************************/
    static final number INT_MAX = 2147483647;
    
    static final number MAX_SEVEN_BIT = 127;
    static final number MAX_EIGHT_BIT = 255;
    static final number MAX_SIXTEEN_BIT=65535;
    
    /********************************************************
        Function: enter
        Description: Debugging routine.
        *******************************************************/
    static function enter( string descent, string lexeme, number token )
    {
        Console.println("Entering " + descent 
                        + " [lexeme: " + lexeme 
                        + "] [token: " + token + "]");
    }
    
    /********************************************************
        Function: leave
        Description: Debugging routine.
        *******************************************************/
    static function leave( string descent, string lexeme, number token )
    {
        Console.println("Leaving " + descent 
                        + " [lexeme:" + lexeme 
                        + "] [token:" + token + "]");
    }
    
    /********************************************************
        Function: ASSERT
        Description: Debugging routine.
        *******************************************************/
    static function ASSERT( number expr )
    {
        if (.DEBUG && false == expr)
        {
            Console.println("Assertion Failed");
            Sys.error("Assertion Failed.",-1);
        }
    }
    
    /***************************************************************
    Function: doubleSize
        **************************************************************/
    static function doubleSize( array oldBuffer /* of char */ )
    {
        number elem;
        
        for(elem = 0; elem < Array.size(oldBuffer); ++elem)
            oldBuffer[];
        
        return oldBuffer;
    }
    
    /********************************************************
    Function: hex2bin
        *******************************************************/
    static function hex2bin( string c )
    {
        if ('0' <= c && '9' >= c)
        {
            return (char) (c - '0');
        }
        else if ('a' <= c && 'f' >= c)
        {
            return (char) (c - 'a' + 10);
        }	    
        else if ('A' <= c && 'F' >= c)
        {
            return (char) (c - 'A' + 10);
        }
        
        CError.impos("Bad hexidecimal digit" + c);
        return 0;
    }
    
    /********************************************************
    Function: ishexdigit
        *******************************************************/
    static function ishexdigit( string c )
    {
        if (('0' <= c && '9' >= c)
            || ('a' <= c && 'f' >= c)
            || ('A' <= c && 'F' >= c))
        {
            return true;
        }
        
        return false;
    }
    
    /********************************************************
    Function: oct2bin
        *******************************************************/
    static function oct2bin( string c )
    {
        if ('0' <= c && '7' >= c)
        {
            return (char) (c - '0');
        }
        
        CError.impos("Bad octal digit " + c);
        return 0;
    }
    
    /********************************************************
    Function: isoctdigit
        *******************************************************/
    static function isoctdigit( string c )
    {
        if ('0' <= c && '7' >= c)
        {
            return true;
        }
        
        return false;
    }
    
    /********************************************************
    Function: isspace
        *******************************************************/
    static function isspace( string c )
    {
        if ('\b' == c 
            || '\t' == c
            || '\n' == c
            || '\f' == c
            || '\r' == c
            || ' ' == c)
        {
            return true;
        }
        
        return false;
    }
    
    /********************************************************
    Function: isnewline
        *******************************************************/
    static function isnewline( string c )
    {
        if ('\n' == c
            || '\r' == c)
        {
            return true;
        }
        
        return false;
    }
    
    /********************************************************
        Function: bytencmp
        Description: Compares up to n elements of 
        byte array a[] against byte array b[].
        The first byte comparison is made between 
        a[a_first] and b[b_first].  Comparisons continue
        until the null terminating byte '\0' is reached
        or until n bytes are compared.
        Return Value: Returns 0 if arrays are the 
        same up to and including the null terminating byte 
        or up to and including the first n bytes,
        whichever comes first.
        *******************************************************/
    static function bytencmp( byte a[], number a_first, byte b[], number b_first, number n )
    {
        number elem;
        
        for (elem = 0; elem < n; ++elem)
        {
            /*Console.print((char) a[a_first + elem]);
            Console.print((char) b[b_first + elem]);*/
            
            if ('\0' == a[a_first + elem] && '\0' == b[b_first + elem])
            {
                /*Console.println("return 0");*/
                return 0;
            }
            if (a[a_first + elem] < b[b_first + elem])
            {
                /*Console.println("return 1");*/
                return 1;
            }
            else if (a[a_first + elem] > b[b_first + elem])
            {
                /*Console.println("return -1");*/
                return -1;
            }
        }
        
        /*Console.println("return 0");*/
        return 0;
    }
    
    /********************************************************
    Function: charncmp
        *******************************************************/
    static function charncmp( string a[], number a_first, string b[], number b_first, number n )
    {
        number elem;
        
        for (elem = 0; elem < n; ++elem)
        {
            if ('\0' == a[a_first + elem] && '\0' == b[b_first + elem])
            {
                return 0;
            }
            if (a[a_first + elem] < b[b_first + elem])
            {
                return 1;
            }
            else if (a[a_first + elem] > b[b_first + elem])
            {
                return -1;
            }
        }
        
        return 0;
    }
}
