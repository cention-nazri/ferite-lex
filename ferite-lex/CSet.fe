

/********************************************************
Class: CSet
*******************************************************/
class CSet 
{
    /********************************************************
    Member Variables
    *******************************************************/
    private object/*SparseBitSet*/ m_set;
    private number m_complement;
    
    /********************************************************
Function: CSet
        *******************************************************/
    function CSet()
    {
        .m_set = new SparseBitSet();
        .m_complement = false;
    }
    
    /********************************************************
Function: complement
        *******************************************************/
    function complement()
    {
        .m_complement = true;
    }
    
    /********************************************************
Function: add
        *******************************************************/
    function add( number i )
    {
        .m_set.set(i);
    }
    
    /********************************************************
Function: addncase
        *******************************************************/
    function addncase( string c )
    {
        /* Do this in a Unicode-friendly way. */
        /* (note that duplicate adds have no effect) */
        add(String.charToNum(c));
        add(String.charToNum(String.toLower(c)));
        add(String.charToNum(String.toUpper(c)));
    }
    
    /********************************************************
Function: contains
        *******************************************************/
    number contains( number i )
    {
        number result = .m_set.get(i);
        
        if (.m_complement)
        {
            return (false == result);
        }
        
        return result;
    }
    
    /********************************************************
Function: mimic
        *******************************************************/
    function mimic( object set )
    {
        .m_complement = set.m_complement;
        .m_set = set.m_set.clone();
    } 
    
    /** Map set using character classes [CSA] */
    function map( object set, array mapping ) 
    {
        .m_complement = set.m_complement;
        .m_set.clearAll();
        Array.each( set.m_set.elements() ) using ( old_value ) { 
            if (old_value < Array.size(mapping)) // skip unmapped characters
                .m_set.set(mapping[old_value]);
        };
    }
}